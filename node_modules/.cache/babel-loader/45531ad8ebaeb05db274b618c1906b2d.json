{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bakug\\\\desktop\\\\frontend_test\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport OneStudent from './components/Student';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StudentApp = () => {\n  _s();\n\n  const [student, setStudent] = useState([]);\n  const [studentNameFilter, setStudentNameFilter] = useState(\"\"); //calling api\n\n  useEffect(() => {\n    axios.get('https://api.hatchways.io/assessment/students').then(res => setStudent(res.data.students));\n  }, []);\n\n  const nameFilter = filterString => {\n    if (filterString && filterString.toLowerCase) {\n      filterString = filterString.toLowerCase();\n    }\n\n    let filtered = [];\n    student.forEach(student => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n\n      if (!filterString || fullName.includes(filterString)) {\n        filtered.push(student);\n      }\n    });\n    return filtered;\n  };\n\n  const createTagForStudent = (student, newTag) => {\n    student.tags.push(newTag);\n    const indexOfStudent = student.findIndex(s => s.id === student.id);\n    let studentWithChanges = [...student.slice(0, indexOfStudent), student, ...student.slice(indexOfStudent + 1)];\n    setStudent(studentWithChanges);\n  };\n\n  const filteredByNameStudents = nameFilter(studentNameFilter);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: event => setStudentNameFilter(event.target.value),\n        type: \"text\",\n        placeholder: \"Search by name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), student.map(student => {\n      return /*#__PURE__*/_jsxDEV(OneStudent, {\n        pic: student.pic,\n        firstName: student.firstName.toUpperCase(),\n        lastName: student.lastName.toUpperCase(),\n        email: student.email,\n        company: student.company,\n        skill: student.skill,\n        grades: student.grades,\n        student: student,\n        createTagForStudent: createTagForStudent\n      }, \"student\" + student.id.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StudentApp, \"48chVFnDPUY9ZEYfNnIKduf/0+Q=\");\n\n_c = StudentApp;\nexport default StudentApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentApp\");","map":{"version":3,"sources":["C:/Users/bakug/desktop/frontend_test/client/src/App.js"],"names":["React","useEffect","useState","axios","OneStudent","StudentApp","student","setStudent","studentNameFilter","setStudentNameFilter","get","then","res","data","students","nameFilter","filterString","toLowerCase","filtered","forEach","fullName","firstName","lastName","includes","push","createTagForStudent","newTag","tags","indexOfStudent","findIndex","s","id","studentWithChanges","slice","filteredByNameStudents","event","target","value","map","pic","toUpperCase","email","company","skill","grades","toString"],"mappings":"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","sourcesContent":["\nimport './App.css';\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport OneStudent from './components/Student';\n\nconst StudentApp = () => {\n  const [student, setStudent] = useState([]);\n  const [studentNameFilter, setStudentNameFilter] = useState(\"\");\n\n  //calling api\n  useEffect(() => {\n      axios.get('https://api.hatchways.io/assessment/students')\n          .then(res => setStudent(res.data.students));\n  }, [])\n\n  const nameFilter = (filterString) => {\n    if (filterString && filterString.toLowerCase) {\n      filterString = filterString.toLowerCase();\n    }\n    let filtered = [];\n    student.forEach((student) => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n\n      if (!filterString || fullName.includes(filterString)) {\n        filtered.push(student);\n      }\n    });\n    return filtered;\n  };\n\n  const createTagForStudent = (student, newTag) => {\n    student.tags.push(newTag);\n\n    const indexOfStudent = student.findIndex((s) => s.id === student.id);\n    let studentWithChanges = [\n      ...student.slice(0, indexOfStudent),\n      student,\n      ...student.slice(indexOfStudent + 1),\n    ];\n    setStudent(studentWithChanges);\n  };\n\n\n  const filteredByNameStudents = nameFilter(studentNameFilter);\n  return (\n    <div >\n      <div className = 'search'> \n            <input \n                onChange= {(event) => setStudentNameFilter(event.target.value)}\n                type= 'text'\n                placeholder= \"Search by name\"\n            />\n        </div>\n      {student.map((student) => {return(\n          <OneStudent\n            key={\"student\" + student.id.toString()}\n            pic={student.pic}\n            firstName={student.firstName.toUpperCase()}\n            lastName={student.lastName.toUpperCase()}\n            email={student.email}\n            company={student.company}\n            skill={student.skill}\n            grades={student.grades}\n            student={student}\n            createTagForStudent={createTagForStudent}/>) })\n            }\n    </div>\n  );\n}\n\nexport default StudentApp;\n"]},"metadata":{},"sourceType":"module"}
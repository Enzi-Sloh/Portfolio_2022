{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bakug\\\\desktop\\\\frontend_test\\\\client\\\\src\\\\components\\\\Student.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OneStudent = _ref => {\n  _s();\n\n  let {\n    id,\n    pic,\n    firstName,\n    lastName,\n    email,\n    company,\n    skill,\n    grades,\n    student,\n    createTagForStudent,\n    tag\n  } = _ref;\n  const [testScores, setTestScores] = useState(false);\n\n  const average = arr => {\n    let sum = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n      sum += parseInt(arr[i]);\n    }\n\n    let total = sum / arr.length;\n    return total;\n  };\n\n  function saveTag() {\n    createTagForStudent(student, newTagName);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: pic,\n      className: \"pfp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"infoWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [firstName, \" \", lastName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\",\n        children: [\" Email: \", email, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\",\n        children: [\" Company: \", company, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\",\n        children: [\" Skill: \", skill, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\",\n        children: [\" Average: \", average(grades), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: testScores && grades.map((grades, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"testscores\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\" \", \"Test \", idx + 1, \" : \", grades, \"%\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 21\n            }, this)\n          }, grades + \" \" + idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      type: \"button\",\n      onClick: () => {\n        setTestScores(!testScores);\n      },\n      children: testScores ? \"-\" : \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tagContainer\",\n      children: [\" \", student.tags.map((tag, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tags\",\n          children: tag\n        }, student.id + \" \" + tag, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this);\n      }) // ^^^^^^^ SHOWS THE TAG ON THE INDIVIDUAL STUDENT\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        // ADDS THE TAG ON ENTER BUTTON\n        onChange: event => {\n          setNewTagName(event.target.value);\n        },\n        onKeyUp: event => {\n          if (event.key === \"Enter\") {\n            saveTag();\n            event.target.value = \"\";\n          }\n        },\n        type: \"text\",\n        placeholder: \"Add a tag\",\n        className: \"tagAdder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 12\n  }, this);\n};\n\n_s(OneStudent, \"njuO8p8HRgML8zUQ/GoU5JSGYS4=\");\n\n_c = OneStudent;\nexport default OneStudent;\n\nvar _c;\n\n$RefreshReg$(_c, \"OneStudent\");","map":{"version":3,"sources":["C:/Users/bakug/desktop/frontend_test/client/src/components/Student.jsx"],"names":["React","useState","OneStudent","id","pic","firstName","lastName","email","company","skill","grades","student","createTagForStudent","tag","testScores","setTestScores","average","arr","sum","i","length","parseInt","total","saveTag","newTagName","map","idx","tags","event","setNewTagName","target","value","key"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst OneStudent = ({id,pic,firstName,lastName,email,company,skill,grades,student,createTagForStudent,\r\n    tag}) =>{\r\n\r\n    const [testScores, setTestScores] = useState(false);\r\n\r\n    const average = (arr) => {\r\n        let sum = 0;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            sum += parseInt(arr[i]);\r\n        }\r\n        let total = sum / arr.length;\r\n        \r\n        return total;\r\n    }\r\n\r\n    function saveTag() {\r\n        createTagForStudent(student, newTagName);\r\n      }\r\n    \r\n\r\n    return(<div className='wrapper'>\r\n    <img src={pic} className='pfp'></img>\r\n    \r\n    <div className='infoWrapper'>\r\n    <h1>{firstName} {lastName}</h1>\r\n\r\n    <div className=\"info\"> Email: {email} </div>\r\n    <div className=\"info\"> Company: {company} </div>\r\n    <div className=\"info\"> Skill: {skill} </div>\r\n    <div className=\"info\"> Average: {average(grades)}%</div>\r\n\r\n    <div>\r\n        {testScores && grades.map((grades, idx) => {\r\n            return (\r\n                <div className= 'testscores' key={grades + \" \" + idx}>\r\n                    <div>\r\n                        {\" \"}\r\n                        Test {idx + 1} : {grades}%{\" \"}\r\n                    </div>\r\n                </div>\r\n            );})}\r\n        </div>\r\n    </div>\r\n\r\n    <button className=\"button\" type='button' onClick={() => {setTestScores(!testScores);}}>\r\n            {testScores ? \"-\" : \"+\"}\r\n    </button>\r\n    <div className= 'tagContainer'>\r\n          \r\n          {\" \"}\r\n          {\r\n            student.tags.map((tag, idx) => {\r\n              return (\r\n                <div className= 'tags' key={student.id + \" \" + tag}>\r\n                  {tag}\r\n                </div>\r\n              );\r\n            }) // ^^^^^^^ SHOWS THE TAG ON THE INDIVIDUAL STUDENT\r\n          }\r\n        </div>\r\n        <div>\r\n          <input // ADDS THE TAG ON ENTER BUTTON\r\n            onChange={(event) => {\r\n              setNewTagName(event.target.value);\r\n            }}\r\n            onKeyUp={(event) => {\r\n              if (event.key === \"Enter\") {\r\n                saveTag();\r\n                event.target.value = \"\";\r\n              }\r\n            }}\r\n            type=\"text\"\r\n            placeholder=\"Add a tag\"\r\n            className=\"tagAdder\"\r\n          />\r\n        </div>\r\n  </div>)\r\n}\r\n\r\nexport default OneStudent;"]},"metadata":{},"sourceType":"module"}
[{"C:\\Users\\bakug\\Desktop\\Frontend_Test\\src\\index.js":"1","C:\\Users\\bakug\\Desktop\\Frontend_Test\\src\\App.js":"2","C:\\Users\\bakug\\Desktop\\Frontend_Test\\src\\views\\about.js":"3","C:\\Users\\bakug\\Desktop\\Frontend_Test\\src\\views\\portfolio.js":"4","C:\\Users\\bakug\\Desktop\\Frontend_Test\\src\\views\\sample.js":"5"},{"size":276,"mtime":1650056073869,"results":"6","hashOfConfig":"7"},{"size":500,"mtime":1650163698246,"results":"8","hashOfConfig":"7"},{"size":202,"mtime":1650056506245,"results":"9","hashOfConfig":"7"},{"size":9401,"mtime":1650207126544,"results":"10","hashOfConfig":"7"},{"size":207,"mtime":1650056528519,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"16ez43j",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\bakug\\Desktop\\Frontend_Test\\src\\index.js",["27"],[],"C:\\Users\\bakug\\Desktop\\Frontend_Test\\src\\App.js",["28"],[],"C:\\Users\\bakug\\Desktop\\Frontend_Test\\src\\views\\about.js",["29"],[],"C:\\Users\\bakug\\Desktop\\Frontend_Test\\src\\views\\portfolio.js",["30"],[],"C:\\Users\\bakug\\Desktop\\Frontend_Test\\src\\views\\sample.js",["31"],[],{"ruleId":null,"fatal":true,"severity":2,"message":"32"},{"ruleId":null,"fatal":true,"severity":2,"message":"32"},{"ruleId":null,"fatal":true,"severity":2,"message":"32"},{"ruleId":null,"fatal":true,"severity":2,"message":"32"},{"ruleId":null,"fatal":true,"severity":2,"message":"32"},"Parsing error: Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured\nfor various types of caching, using the first param of their handler functions:\n\nmodule.exports = function(api) {\n  // The API exposes the following:\n\n  // Cache the returned value forever and don't call this function again.\n  api.cache(true);\n\n  // Don't cache at all. Not recommended because it will be very slow.\n  api.cache(false);\n\n  // Cached based on the value of some function. If this function returns a value different from\n  // a previously-encountered value, the plugins will re-evaluate.\n  var env = api.cache(() => process.env.NODE_ENV);\n\n  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for\n  // any possible NODE_ENV value that might come up during plugin execution.\n  var isProd = api.cache(() => process.env.NODE_ENV === \"production\");\n\n  // .cache(fn) will perform a linear search though instances to find the matching plugin based\n  // based on previous instantiated plugins. If you want to recreate the plugin and discard the\n  // previous instance whenever something changes, you may use:\n  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === \"production\");\n\n  // Note, we also expose the following more-verbose versions of the above examples:\n  api.cache.forever(); // api.cache(true)\n  api.cache.never();   // api.cache(false)\n  api.cache.using(fn); // api.cache(fn)\n\n  // Return the value that will be cached.\n  return { };\n};"]